<!DOCTYPE html>
<!--[if IE 7]> <html class="ie ie7 lte9 lte8 lte7"> <![endif]-->
<!--[if IE 8]> <html class="ie ie8 lte9 lte8"> <![endif]-->
<!--[if IE 9]> <html class="ie ie9 lte9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]> ><! <![endif]-->
<html>
<head>
<meta charset='utf-8'>
<meta content='IE=edge,chrome=1' http-equiv='X-UA-Compatible'>
<title>Why Are There So Many Pythons? From Bytecode to JIT | Toptal</title>
<meta content='Why Are There So Many Pythons? From Bytecode to JIT | Toptal' name='title'>
<meta content='Toptal connects start-ups, businesses, and organizations to a growing network of the best developers in the world. Our engineers are available full- or part-time and are able to seamlessly integrate into your team.' name='description'>
<link href="/assets/favicons/favicon-95839ebdb248c7cb07ad86866c782727.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
<link href='/assets/favicons/touch_x57-45ec7b0cd5b4b9e10550e8ec2c87312e.png' rel='apple-touch-icon-precomposed' sizes='57x57'>
<link href='/assets/favicons/touch_x72-06f083faf048cccae046b40a10bc0ef1.png' rel='apple-touch-icon-precomposed' sizes='72x72'>
<link href='/assets/favicons/touch_x114-f0ce3ee810a344dc43dda9e5d22ae19b.png' rel='apple-touch-icon-precomposed' sizes='114x114'>
<link href='/assets/favicons/touch_x57-45ec7b0cd5b4b9e10550e8ec2c87312e.png' rel='apple-touch-icon-precomposed'>

<meta content="authenticity_token" name="csrf-param" />
<meta content="6vM8PnDGToX78C1LE9xv02We+wcEft3fxPrpXGs1aJM=" name="csrf-token" />
<!--[if lt IE 9]>
<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<link href="/assets/public-994e176368b83aa79c1c43211a81653e.css" media="screen" rel="stylesheet" type="text/css" />
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js" type="text/javascript"></script>
<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js" type="text/javascript"></script>
<script src="/assets/application-641d538b6bf816ed21622967972de45f.js" type="text/javascript"></script>
<meta content='Why Are There So Many Pythons?' property='og:title'>
<meta content='/uploads/blog/image/125/toptal-blog-B.png' property='og:image'>
<meta content='Toptal Engineering Blog' property='og:site_name'>
<meta content='Is Python interpreted or compiled? Are CPython and Cython the same thing? And what on Earth is PyPy? Understand the alphabet of Pythons, from start to finish.' property='og:description'>

<script type="text/javascript">var NREUMQ=NREUMQ||[];NREUMQ.push(["mark","firstbyte",new Date().getTime()]);</script></head>
<body>
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1&appId=565054136848482";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>


<script type="text/javascript">
  var WRInitTime=(new Date()).getTime();
</script>

<div class='public_header__wrapper'>
<div class='public_header'>
<div class='public_header__left'>
<div class='public_header__fact_sheet public_header__cell logo'>
<a class='public_header__logotype' href='http://www.toptal.com/'>
Toptal
</a>
</div>
<div class='public_header__motto public_header__cell'>
Exclusive access to top developers
</div>
</div>
<div class='public_header__right'>
<div class='public_header__join public_header__cell'>
<div class='public_header__join_part'>
Join toptal as
</div>
<div class='public_button__wrapper is-small public_header__join_button_wrapper'>
<a href="http://www.toptal.com/developer" class="public_button">Developer</a>
</div>
<div class='public_button__wrapper is-small public_header__join_button_wrapper'>
<a href="https://www.toptal.com/apply/company" class="public_button">Client</a>
</div>
</div>
<div class='public_header__user public_header__cell'>
<div class='public_header__user_buttons'>
<div class='public_button__wrapper is-small is-blue'>
<a class='public_button' href='https://www.toptal.com/users/login' id='login_link'>
Login
</a>
</div>
</div>
</div>
</div>
<div class='clear'></div>
</div>
</div>

<header class='page_header'>
<div class='container'>
<hr>
<nav>
<ul>
<li>
<div class='menu_option_item' id='button_home'><a href="http://www.toptal.com/" id="button_home_link">Home</a></div>
</li>
<li>
<div class='menu_option_item' id='button_what'><a href="http://www.toptal.com/what" id="button_what_link">What</a></div>
</li>
<li>
<div class='menu_option_item' id='button_why'><a href="http://www.toptal.com/why" id="button_why_link">Why</a></div>
</li>
<li>
<div class='menu_option_item' id='button_how'><a href="http://www.toptal.com/how" id="button_how_link">How</a></div>
</li>
<li>
<div class='menu_option_item' id='button_clients'><a href="http://www.toptal.com/clients" id="button_clients_link">Clients</a></div>
</li>
<li>
<div class='menu_option_item' id='button_team'><a href="http://www.toptal.com/team" id="button_team_link">Team</a></div>
</li>
<li>
<div class='menu_option_item' id='button_blog'><a href="http://www.toptal.com/blog" id="button_blog_link">Blog</a></div>
</li>
<li>
<div class='menu_option_item' id='button_faq'><a href="http://www.toptal.com/faq" id="button_faq_link">FAQ</a></div>
</li>
</ul>
<div class='phone nowrap'>
<p>
Call us:
<span>888.604.3188</span>
</p>
</div>
</nav>
</div>
</header>
<script>Rails.flash = {}</script>
<div id='flashes-container'></div>

<div id='content'>
<div class='blog'>
<div class='blog__container'>
<div class='blog__title'>
<div class='blog__header'>
<a class='blog__back_link' href='/blog'>
<span class='blog__back_link_icon'></span>
View all articles
</a>
</div>
<div class='blog__rss_link'>
<a href="https://twitter.com/toptalllc" class="twitter-follow-button" data-show-count="true">Follow @toptalllc</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>
</div>
<div class='blog__content'>
<div class='blog__post'>
<div class='blog__post_header_wrapper'>
<div class='blog__post_avatar_block'>
<div class='blog__post_avatar is-for_header is-x50'>
<img alt="Toptal-blog-screen_shot_2013-09-18_at_1.33.10_pm" src="/uploads/blog/image/119/toptal-blog-Screen_Shot_2013-09-18_at_1.33.10_PM.png" width="50" />
</div>
<h1 class='blog__post_header'>
<a href="/python/why-are-there-so-many-pythons">Why Are There So Many Pythons?</a>
</h1>
<div class='blog__post_info'>
by
<span><a href="http://www.princeton.edu/~crmarsh/" target="_blank">Charles Marsh</a></span>
-
<span>Head of Community</span>
@
<span>
<a href="http://www.toptal.com" target="_blank">Toptal</a>
</span>
</div>
</div>
<div class='blog__post_section with-tags'>
<div class='blog__post_tags'>#Python #PyPy #IronPython #Jython #RubyPython #RPython</div>
</div>
<div class='blog__post_section with-share'>
<ul class='blog__post_share_buttons'>
<li class='blog__post_share'><div class="fb-like" data-href="http://www.toptal.com/python/why-are-there-so-many-pythons" data-send="false" data-layout="button_count" data-width="450" data-show-faces="false"></div>
</li>
<li class='blog__post_share'><!-- Place this tag where you want the share button to render. -->
<div class="g-plus" data-action="share" data-annotation="bubble" data-href="http://www.toptal.com/python/why-are-there-so-many-pythons"></div>

<!-- Place this tag after the last share tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</li>
<li class='blog__post_share'><script src="//platform.linkedin.com/in.js" type="text/javascript"> lang: en_US</script><script type="IN/Share" data-url="http://www.toptal.com/python/why-are-there-so-many-pythons" data-counter="right"></script>
</li>
<li class='blog__post_share'><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.toptal.com/python/why-are-there-so-many-pythons" data-via="toptalllc">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</li>
</ul>
</div>
</div>
<div class='blog__post_text js-blog_body'>
<p>Python is amazing.</p>

<p>Surprisingly, that’s a fairly ambiguous statement. What do I mean by ‘Python’? Do I mean Python the abstract <em>interface</em>? Do I mean CPython, the common Python <em>implementation</em> (and not to be confused with the similarly named Cython)? Or do I mean something else entirely? Maybe I’m obliquely referring to Jython, or IronPython, or PyPy. Or maybe I’ve really gone off the deep end and I’m talking about RPython or RubyPython (which are very, very different things).</p>

<p>While the technologies mentioned above are commonly-named and commonly-referenced, some of them serve completely different purposes (or, at least, operate in completely different ways).</p>

<p>Throughout my time working with Python, I’ve run across tons of these .*ython tools. But not until recently did I take the time to understand what they are, how they work, and why they’re necessary (in their own ways).</p>

<p>In this post, I’ll start from scratch and move through the various Python implementations, concluding with a thorough introduction to PyPy, which I believe is the future of the language.</p>

<p>It all starts with an understanding of what ‘Python’ actually is.</p>

<p><em>If you have a good understanding for machine code, virtual machines, and the like, feel free to <a href="http://www.toptal.com/python/why-are-there-so-many-pythons#PyPy">skip ahead</a>.</em></p>

<h2 id="is-python-interpreted-or-compiled">“Is Python interpreted or compiled?”</h2>

<p>This is a common point of confusion for Python beginners.</p>

<p>The first thing to realize is that ‘Python’ is an <em>interface</em>. There’s a <a href="http://docs.python.org/2/reference/index.html">specification</a> of what Python <em>should</em> do and how it <em>should</em> behave (as with any interface). And there are multiple <em>implementations</em> (as with any interface).</p>

<p>The second thing to realize is that ‘interpreted’ and ‘compiled’ are properties of an <em>implementation</em>, not an <em>interface</em>.</p>

<p>So the question itself isn’t really well-formed.</p>

<div class="pop_out_box is-full_width is-big">
Is Python interpreted or compiled? The question isn't really well-formed.
</div>

<p>That said, for the most common implementation (CPython: written in C, often referred to as simply ‘Python’, and surely what you’re using if you have no idea what I’m talking about), the answer is: <strong>interpreted</strong>, with <em>some</em> compilation. CPython <em>compiles</em>* Python source code to bytecode, and then <em>interprets</em> this bytecode, executing it as it goes.</p>

<p>* <em>Note: this isn’t ‘compilation’ in the traditional sense of the word. Typically, we’d say that ‘compilation’ is taking a high-level language and converting it to machine code. But it is a ‘compilation’ of sorts.</em></p>

<p>Let’s look at that answer more closely, as it will help us understand some of the concepts that come up later in the post.</p>

<h2 id="bytecode-vs-machine-code">Bytecode vs. Machine Code</h2>

<p>It’s very important to understand the difference between bytecode and machine (or native) code, perhaps best illustrated by example:</p>

<ul>
  <li>C compiles to machine code, which is then run directly on your processor. Each instruction instructs your CPU to move stuff around.</li>
  <li>Java compiles to bytecode, which is then run on the Java Virtual Machine (JVM), an abstraction of a computer that executes programs. Each instruction is then handled by the JVM, which interacts with your computer.</li>
</ul>

<p>In very brief terms: <strong>machine code is much faster, but bytecode is more portable and secure</strong>.</p>

<p>Machine code looks different depending on your machine, but bytecode looks the same on all machines. One might say that machine code is <em>optimized</em> to your setup.</p>

<p>Returning to CPython, the toolchain process is as follows:</p>

<ol>
  <li>CPython compiles your Python source code into bytecode.</li>
  <li>That bytecode is then executed on the CPython Virtual Machine.</li>
</ol>

<div class="pop_out_box">
Beginners often assume Python is compiled because of .pyc files. There's some truth to that: the .pyc file is the compiled bytecode, which is then interpreted. So if you've run your Python code before and have the .pyc file handy, it will run faster the second time, as it doesn't have to re-compile the bytecode.
</div>

<h2 id="alternative-vms-jython-ironpython-and-more">Alternative VMs: Jython, IronPython, and More</h2>

<p>As I mentioned earlier, Python has <em>several</em> implementations. Again, as mentioned earlier, the most common is CPython. This a Python implementation written in C and considered the ‘default’ implementation.</p>

<p>But what about the alternatives? One of the more prominent is <a href="http://www.jython.org/archive/21/docs/whatis.html">Jython</a>, a Python implementation written Java that utilizes the JVM. While CPython produces bytecode to run on the CPython VM, Jython produces <strong>Java bytecode</strong> to run on the JVM (this is the same stuff that’s produced when you compile a Java program).</p>

<p><img src="/uploads/blog/image/127/toptal-blog-C.png" alt="" /></p>

<p>“Why would you ever use an alternative implementation?”, you might ask. Well, for one, these <strong>different implementations play nicely with different technology stacks</strong>.</p>

<p>CPython makes it very easy to write C-extensions for your Python code because in the end it is executed by a C interpreter. Jython, on the other hand, makes it very easy to work with other Java programs: you can import <em>any</em> Java classes with no additional effort, summoning up and utilizing your Java classes from within your Jython programs. <em>(Aside: if you haven’t thought about it closely, this is actually nuts. We’re at the point where you can mix and mash different languages and compile them all down to the same substance. (As mentioned by <a href="http://www.reddit.com/user/Rostin">Rostin</a>, programs that mix Fortran and C code have been around for a while. So, of course, this isn’t necessarily new. But it’s still cool.))</em></p>

<p>As an example, this is valid Jython code:</p>

<pre><code>[Java HotSpot(TM) 64-Bit Server VM (Apple Inc.)] on java1.6.0_51
&gt;&gt;&gt; from java.util import HashSet
&gt;&gt;&gt; s = HashSet(5)
&gt;&gt;&gt; s.add("Foo")
&gt;&gt;&gt; s.add("Bar")
&gt;&gt;&gt; s
[Foo, Bar]
</code></pre>

<p><a href="http://ironpython.net">IronPython</a> is another popular Python implementation, written entirely in C# and targeting the .NET stack. In particular, it runs on what you might call the .NET Virtual Machine, Microsoft’s <a href="http://en.wikipedia.org/wiki/Common_Language_Runtime">Common Language Runtime (CLR)</a>, comparable to the JVM.</p>

<p>You might say that <em>Jython : Java :: IronPython : C#</em>. They run on the same respective VMs, you can import C# classes from your IronPython code and Java classes from your Jython code, etc.</p>

<p>It’s totally possible to survive without ever touching a non-CPython Python implementation. But there are advantages to be had from switching, most of which are dependent on your technology stack. Using a lot of JVM-based languages? Jython might be for you. All about the .NET stack? Maybe you should try IronPython (and maybe you already have).</p>

<p><img src="/uploads/blog/image/128/toptal-blog-A.png" alt="" /></p>

<p>By the way: while this wouldn’t be a <em>reason</em> to use a different implementation, note that these implementations do actually differ in behavior beyond how they treat your Python source code. However, these differences are typically minor, and dissolve or emerge over time as these implementations are under active development. For example, IronPython <a href="http://ironpython.codeplex.com/wikipage?title=IPy1.0.xCPyDifferences&amp;referringTitle=Home">uses Unicode strings by default</a>; CPython, however, <a href="http://docs.python.org/2/howto/unicode.html#encodings">defaults to ASCII</a> for versions 2.x (failing with a UnicodeEncodeError for non-ASCII characters), but does support  <a href="http://docs.python.org/3/howto/unicode.html#python-s-unicode-support">Unicode strings by default for 3.x</a>.</p>

<h2 id="PyPy">Just-in-Time Compilation: PyPy, and the Future</h2>

<p>So we have a Python implementation written in C, one in Java, and one in C#. The next logical step: a Python implementation written in… Python.  (The educated reader will note that this is slightly misleading.)</p>

<p>Here’s where things might get confusing. First, lets discuss just-in-time (JIT) compilation.</p>

<h3 id="jit-the-why-and-how">JIT: The Why and How</h3>

<p>Recall that native machine code is much faster than bytecode. <em>Well, what if we could compile some of our bytecode and then run it as native code?</em> We’d have to pay some price to compile the bytecode (i.e., time), but if the end result was faster, that’d be great! This is the motivation of JIT compilation, a hybrid technique that mixes the benefits of interpreters and compilers. In basic terms, JIT wants to utilize compilation to speed up an interpreted system.</p>

<p>For example, a common approach taken by JITs:</p>

<ol>
  <li>Identify bytecode that is executed frequently.</li>
  <li>Compile it down to native machine code.</li>
  <li>Cache the result.</li>
  <li>Whenever the same bytecode is set to be run, instead grab the pre-compiled machine code and reap the benefits (i.e., speed boosts).</li>
</ol>

<p>This is what PyPy is all about: bringing JIT to Python (see the <em>Appendix</em> for previous efforts). There are, of course, other goals: PyPy aims to be cross-platform, memory-light, and stackless-supportive. But JIT is really its selling point. As an average over a bunch of time tests, it’s said to improve performance by a factor of <a href="http://speed.pypy.org">6.27</a>. For a breakdown, see this chart from the <a href="http://speed.pypy.org">PyPy Speed Center</a>:</p>

<p><img src="/uploads/blog/image/85/toptal-blog-PyPy.png" alt="" /></p>

<h3 id="pypy-is-hard-to-understand">PyPy is Hard to Understand</h3>

<p>PyPy has huge potential, and at this point it’s <a href="http://doc.pypy.org/en/latest/faq.html#is-pypy-a-drop-in-replacement-for-cpython">highly compatible</a> with CPython (so <a href="http://pypy.org/compat.html">it can run Flask, Django</a>, etc.).</p>

<p>But there’s a lot of confusion around PyPy (see, for example, this nonsensical proposal to create a <a href="http://stackoverflow.com/questions/2591879/pypy-how-can-it-possibly-beat-cpython">PyPyPy…</a>). In my opinion, that’s primarily because PyPy is actually two things:</p>

<ol>
  <li>
    <p>A Python interpreter written in <a href="http://doc.pypy.org/en/latest/coding-guide.html#id1">RPython</a> (not Python (I lied before)). RPython is a subset of Python with static typing. In Python, it’s <a href="http://doc.pypy.org/en/latest/faq.html#can-rpython-compile-normal-python-programs-to-c">“mostly impossible”</a> to reason rigorously about types (Why is it so hard? Well consider the fact that:</p>

    <pre><code> x = random.choice([1, "foo"])
</code></pre>

    <p>would be valid Python code (credit to <a href="http://www.reddit.com/user/Ademan">Ademan</a>). What is the type of <code>x</code>? How can we reason about types of variables when the types aren’t even strictly enforced?). With RPython, you sacrifice some flexibility, but instead make it much, much easier to reason about memory management and whatnot, which allows for optimizations.</p>
  </li>
  <li>
    <p>A compiler that compiles RPython code for various targets and adds in JIT. <a href="http://doc.pypy.org/en/latest/translation.html#overview">The default platform is C</a>, i.e., an RPython-to-C compiler, but you could also target the JVM and others.</p>
  </li>
</ol>

<p>Solely for clarity, I’ll refer to these as PyPy (1) and PyPy (2).</p>

<p>Why would you need these two things, and why under the same roof? Think of it this way: PyPy (1) is an interpreter written in RPython. So it takes in the user’s Python code and compiles it down to bytecode. But the interpreter itself (written in RPython) must be interpreted by another Python implementation in order to run, right?</p>

<p>Well, we could just <a href="http://www.stavros.io/posts/what-is-pypy/">use CPython</a> to run the interpreter. But that wouldn’t be very fast.</p>

<p>Instead, the idea is that we use PyPy (2) (referred to as the <a href="http://doc.pypy.org/en/latest/translation.html">RPython Toolchain</a>) to compile PyPy’s interpreter down to code for another platform (e.g., C, JVM, or CLI) to run on our machine, adding in JIT as well. It’s magical: PyPy dynamically adds JIT to an interpreter, generating its own compiler! (<em>Again, this is nuts: we’re compiling an interpreter, adding in another separate, standalone compiler.</em>)</p>

<p>In the end, the result is a standalone executable that interprets Python source code and exploits JIT optimizations. Which is just what we wanted! It’s a mouthful, but maybe this diagram will help:</p>

<p><img src="/uploads/blog/image/129/toptal-blog-B.png" alt="" /></p>

<p>To reiterate, the real beauty of PyPy is that we could write ourselves a bunch of different Python interpreters in RPython without worrying about JIT (barring <a href="http://doc.pypy.org/en/latest/jit/pyjitpl5.html#jit-hints">a few hints</a>). <em>PyPy would then implement JIT for us</em> using the RPython Toolchain/PyPy (2).</p>

<p>In fact, if we get even more abstract, you could theoretically write an interpreter for <em>any</em> language, feed it to PyPy, and get a JIT for that language. This is because PyPy focuses on optimizing the actual interpreter, rather than the details of the language it’s interpreting.</p>

<div class="pop_out_box is-full_width is-big">
You could theoretically write an interpreter for any language, feed it to PyPy, and get a JIT for that language.
</div>

<p>As a brief digression, I’d like to mention that the JIT itself is absolutely fascinating. It uses a technique called tracing, which executes <a href="http://morepypy.blogspot.com/2009/03/applying-tracing-jit-to-interpreter.html">as follows</a>:</p>

<ol>
  <li>Run the interpreter and interpret everything (adding in no JIT).</li>
  <li>Do some light profiling of the interpreted code.</li>
  <li>Identify operations you’ve performed before.</li>
  <li>Compile these bits of code down to machine code.</li>
</ol>

<p><em>For more, <a href="https://bitbucket.org/pypy/extradoc/src/tip/talk/icooolps2009/bolz-tracing-jit-final.pdf">this paper</a> is highly accessible and very interesting.</em></p>

<p>To wrap up: we use PyPy’s RPython-to-C (or other target platform) compiler to compile PyPy’s RPython-implemented interpreter.</p>

<h2 id="wrapping-up">Wrapping Up</h2>

<p>Why is this so great? Why is this crazy idea worth pursuing? I think <a href="http://pypy.org/people.html#alex-gaynor">Alex Gaynor</a> put it well on his <a href="http://alexgaynor.net/2010/may/15/pypy-future-python/">blog</a>: “[PyPy is the future] because [it] offers better speed, more flexibility, and is a better platform for Python’s growth.”</p>

<p>In short:</p>

<ul>
  <li><strong>It’s fast because it compiles source code to native code</strong> (using JIT).</li>
  <li><strong>It’s flexible because it adds the JIT to your interpreter</strong> with very little additional work.</li>
  <li><strong>It’s flexible (again) because you can write your interpreters in RPython</strong>, which is easier to extend than, say, C (in fact, it’s so easy that there’s a <a href="http://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">tutorial for writing your own interpreters</a>).</li>
</ul>

<h2 id="appendix-other-names-you-may-have-heard">Appendix: Other Names You May Have Heard</h2>
<ul>
  <li>
    <p><a href="http://www.python.org/dev/peps/pep-3000/">Python 3000 (Py3k)</a>: an alternative naming for Python 3.0, a major, <a href="http://www.python.org/dev/peps/pep-3000/#compatibility-and-transition">backwards-incompatible</a> Python release that hit the stage in <a href="http://python.org/download/releases/3.0/">2008</a>. The Py3k team predicted that it would take about <a href="http://programmers.stackexchange.com/questions/63859/why-do-people-hesitate-to-use-python-3#answer-63935">five years</a> for this new version to be fully adopted. And while <em>most</em> (warning: anecdotal claim) Python developers continue to use Python 2.x, people are increasingly conscious of Py3k.</p>
  </li>
  <li><a href="http://cython.org">Cython</a>: a superset of Python that includes bindings to call C functions.
    <ul>
      <li>Goal: allow you to write C extensions for your Python code.</li>
      <li>Also lets you add <a href="http://docs.cython.org/src/quickstart/cythonize.html">static typing</a> to your existing Python code, allowing it to be compiled and reach C-like performance.</li>
      <li>This is similar to PyPy, but not the same. In this case, you’re enforcing typing in the user’s code before passing it to a compiler. With PyPy, you write plain old Python, and the compiler handles any optimizations.</li>
    </ul>
  </li>
  <li>
    <p><a href="http://numba.pydata.org">Numba</a>: a “just-in-time specializing compiler” that adds JIT to <em>annotated</em> Python code. In the most basic terms, you give it some hints, and it speeds up portions of your code. Numba comes as part of the <a href="http://docs.continuum.io/anaconda/index.html">Anaconda</a> distribution, a set of packages for data analysis and management.</p>
  </li>
  <li>
    <p><a href="http://ipython.org/index.html">IPython</a>: very different from anything else discussed. A computing environment for Python. Interactive with support for GUI toolkits and browser experience, etc.</p>
  </li>
  <li><a href="http://psyco.sourceforge.net">Psyco</a>: a <a href="http://rayli.net/blog/2010/04/what-is-the-purpose-of-pypy/">Python extension module</a>, and one of the early Python JIT efforts. However, it’s since been marked as <a href="http://psyco.sourceforge.net">“unmaintained and dead”</a>. In fact, the lead developer of Psyco, <a href="http://pypy.org/people.html#armin-rigo">Armin Rigo, now works on PyPy</a>. </li>
</ul>

<h3 id="language-bindings">Language Bindings</h3>

<div style="height:20px"></div>

<ul>
  <li>
    <p><a href="http://rubypython.rubyforge.org">RubyPython</a>: a bridge between the Ruby and Python VMs. Allows you to embed Python code into your Ruby code. You define where the Python starts and stops, and RubyPython marshals the data between the VMs.</p>
  </li>
  <li>
    <p><a href="http://pythonhosted.org/pyobjc/#release-information">PyObjc</a>: language-bindings between Python and Objective-C, acting as a bridge between them. Practically, that means you can utilize Objective-C libraries (including everything you need to create OS X applications) from your Python code, and Python modules from your Objective-C code. In this case, it’s convenient that CPython is written in C, which is a subset of Objective-C.</p>
  </li>
  <li>
    <p><a href="http://www.riverbankcomputing.com/software/pyqt/intro">PyQt</a>: while PyObjc gives you binding for the OS X GUI components, PyQt does the same for the Qt application framework, letting you create rich graphic interfaces, access SQL databases, etc. Another tool aimed at bringing Python’s simplicity to other frameworks.</p>
  </li>
</ul>

<h3 id="javascript-frameworks">JavaScript Frameworks</h3>

<div style="height:20px"></div>

<ul>
  <li>
    <p><a href="http://pyjs.org">pyjs (Pyjamas)</a>: a framework for creating web and desktop applications in Python. Includes a Python-to-JavaScript compiler, a widget set, and some more tools.</p>
  </li>
  <li>
    <p><a href="http://www.brython.info">Brython</a>: a Python VM written in JavaScript to allow for Py3k code to be executed in the browser.</p>
  </li>
</ul>

</div>
<div class='blog__post_section with-hire-link'>
<a href="/python">Looking to hire top engineers? Check out Toptal&#x27;s Python developers!</a>
</div>
<div class='blog__post_comments'>
<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'toptal';
    var disqus_identifier = "python/why-are-there-so-many-pythons";

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

</div>
</div>

</div>
<div class='blog__side'>
<div class='blog__side_section'>
<div class='blog__side_header'>
<span class='blog__side_section_icon is-latest'></span>
Latest articles
</div>
<ul class='blog__side_list'>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/sql/sql-database-tuning-for-developers">SQL Database Tuning for Developers</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/java/hunting-memory-leaks-in-java">Hunting Memory Leaks in Java</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/ios/building-an-infinite-runner-on-ios-cocos2d-automation-scripts">Building an Infinite Runner on iOS: Cocos2D, Automation, and More</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/java/the-trie-a-neglected-data-structure">The Trie: A Neglected Data Structure</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/scala/scaling-play-to-thousands-of-concurrent-requests">Scaling Play! to Thousands of Concurrent Requests</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/data-science/algorithmic-trading-a-practical-tale-for-engineers">Algorithmic Trading: A Practical Tale for Engineers</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js">Why The Hell Would I Use Node.js? A Case-by-Case Introduction</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/ruby-on-rails/build-dumb-refactor-smart-ruby-on-rails">Build Dumb, Refactor Smart: How to Massage Problems Out of Rails Code</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/ruby-on-rails/after-two-decades-of-programming-i-use-rails">After Two Decades of Programming, I Use Rails</a>
</li>
<li class='blog__side_list_item'>
<a href="http://www.toptal.com/android/control-your-laptop-with-android-python-twisted-and-django">Control Your Laptop with Android, Python, Twisted, and Django</a>
</li>
</ul>
</div>
<div class='blog__side_section'>
<div class='blog__side_header'>
<span class='blog__side_section_icon is-latest'></span>
Relevant Technologies
</div>
<ul class='blog__side_list'>
<li class='blog__side_list_item'>
<a href="/python">Python</a>
</li>
<li class='blog__side_list_item'>
<a href="/pyobjc">PyObjc</a>
</li>
<li class='blog__side_list_item'>
<a href="/pyqt">PyQT</a>
</li>
</ul>
</div>
<div class='blog__side_section'>
<div class='blog__side_header'>
<span class='blog__side_section_icon is-popular'></span>
Popular authors
</div>
<div class='blog__side_faces'>
<div class='blog__post_avatar is-for_list is-x30'>
<a href="http://www.linkedin.com/pub/taso-du-val/2/621/2a3" target="_blank" title="Taso Du Val"><img alt="Taso Du Val" src="/uploads/blog/image/44/toptal-blog-image-1375476149497.jpg" width="30" /></a>
</div>
<div class='blog__post_avatar is-for_list is-x30'>
<a href="/resume/rodrigo-koch" target="_blank" title="Rodrigo Koch"><img alt="Rodrigo Koch" src="/uploads/user/photo/764/thumb_1.png" width="30" /></a>
</div>
<div class='blog__post_avatar is-for_list is-x30'>
<a href="/resume/jose-ferreira-de-souza-filho" target="_blank" title="Jose Ferreira de Souza Filho"><img alt="Jose Ferreira de Souza Filho" src="/uploads/user/photo/2932/thumb_100_8176.JPG" width="30" /></a>
</div>
<div class='blog__post_avatar is-for_list is-x30'>
<a href="http://www.princeton.edu/~crmarsh/" target="_blank" title="Charles Marsh"><img alt="Charles Marsh" src="/uploads/blog/image/119/toptal-blog-Screen_Shot_2013-09-18_at_1.33.10_PM.png" width="30" /></a>
</div>
<div class='blog__post_avatar is-for_list is-x30'>
<a href="/resume/alexey-zankevich" target="_blank" title="Alexey Zankevich"><img alt="Alexey Zankevich" src="/uploads/user/photo/752/thumb_DSCN0572.JPG" width="30" /></a>
</div>
</div>
</div>
</div>
<div class='blog__clearfix'></div>
</div>
</div>

</div>
<footer>
<div class='join'>
<span class='is-short join_community'>Join Toptal:</span>
<div class='public_button__wrapper'>
<a class='public_button' href='https://www.toptal.com/apply/company'>
Hire a developer
</a>
</div>
<i>or</i>
<div class='public_button__wrapper'>
<a class='public_button' href='http://www.toptal.com/developer'>
apply as a developer
</a>
</div>
<div class='public_footer__fact_sheet'>
<div class='public_fact_sheet'>
<div class='public_fact_sheet__text'>
<div class='public_fact_sheet__header'>
Get the fact sheet
</div>
<div class='public_fact_sheet__description'>
A one–page summary
</div>
</div>
<div class='public_button__wrapper is-small is-light_blue public_fact_sheet__button_wrapper'>
<a class='public_button' href='/assets/toptal-fact-sheet-a7803b95a346bcb366a9c7c45175c7ad.pdf' onclick="_gaq.push(['_trackEvent', 'Downloads', 'Fact Sheet']);" target='_blank'>
Download
</a>
</div>
</div>

</div>
</div>
<hr>
<div class='container'>
<section class='about'>
<h3>About toptal</h3>
<p>Toptal connects start-ups, businesses, and organizations to a growing network of the best developers in the world.</p>
<p>Our engineers are available full- or part-time and are able to seamlessly integrate into your team.</p>
</section>
<nav>
<ul>
<li><a href="http://www.toptal.com/what">What</a></li>
<li><a href="http://www.toptal.com/why">Why</a></li>
<li><a href="http://www.toptal.com/how">How</a></li>
<li><a href="http://www.toptal.com/clients">Clients</a></li>
<li><a href="http://www.toptal.com/team">Team</a></li>
<li><a href="http://www.toptal.com/blog">Blog</a></li>
<li><a href="http://www.toptal.com/faq">FAQ</a></li>
</ul>
</nav>
<div class='contact'>
<h3>Contact</h3>
<ul>
<li><a href="http://www.toptal.com/developer">Apply for work</a></li>
<li><a href="https://www.toptal.com/partner">Become a partner</a></li>
<li><a href="https://www.toptal.com/contact" id="send_us_an_email_link">Send us an email</a></li>
<li>Call 888.604.3188</li>
</ul>
</div>
<figure class='map'>
<img alt="Developers_around_the_world" src="/assets/developers_around_the_world-4d998308717802176c3caf2d4ae1db01.png" />
</figure>
</div>
<div class='container'>
<div class='small copyright'>© Copyright 2010 - 2013 Toptal, LLC</div>
<div class='terms'>
<ul>
<li><a href="http://www.toptal.com/privacy">Privacy policy</a></li>
</ul>
</div>
<div class='map_tag'>
<img alt="Map_marker" src="/assets/map_marker-f554fce43972cc56d4a2687f06f8273a.png" />
Toptal developers around the World
</div>
</div>
</footer>
<div class='counters-block'>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-21104039-1']);
  _gaq.push(['_setDomainName', '.toptal.com']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!-- begin olark code --><script type='text/javascript'>/*{literal}<![CDATA[*/window.olark||(function(i){var e=window,h=document,a=e.location.protocol=="https:"?"https:":"http:",g=i.name,b="load";(function(){e[g]=function(){(c.s=c.s||[]).push(arguments)};var c=e[g]._={},f=i.methods.length; while(f--){(function(j){e[g][j]=function(){e[g]("call",j,arguments)}})(i.methods[f])} c.l=i.loader;c.i=arguments.callee;c.f=setTimeout(function(){if(c.f){(new Image).src=a+"//"+c.l.replace(".js",".png")+"&"+escape(e.location.href)}c.f=null},20000);c.p={0:+new Date};c.P=function(j){c.p[j]=new Date-c.p[0]};function d(){c.P(b);e[g](b)}e.addEventListener?e.addEventListener(b,d,false):e.attachEvent("on"+b,d); (function(){function l(j){j="head";return["<",j,"></",j,"><",z,' onl'+'oad="var d=',B,";d.getElementsByTagName('head')[0].",y,"(d.",A,"('script')).",u,"='",a,"//",c.l,"'",'"',"></",z,">"].join("")}var z="body",s=h[z];if(!s){return setTimeout(arguments.callee,100)}c.P(1);var y="appendChild",A="createElement",u="src",r=h[A]("div"),G=r[y](h[A](g)),D=h[A]("iframe"),B="document",C="domain",q;r.style.display="none";s.insertBefore(r,s.firstChild).id=g;D.frameBorder="0";D.id=g+"-loader";if(/MSIE[ ]+6/.test(navigator.userAgent)){D.src="javascript:false"} D.allowTransparency="true";G[y](D);try{D.contentWindow[B].open()}catch(F){i[C]=h[C];q="javascript:var d="+B+".open();d.domain='"+h.domain+"';";D[u]=q+"void(0);"}try{var H=D.contentWindow[B];H.write(l());H.close()}catch(E){D[u]=q+'d.write("'+l().replace(/"/g,String.fromCharCode(92)+'"')+'");d.close();'}c.P(2)})()})()})({loader:(function(a){return "static.olark.com/jsclient/loader0.js?ts="+(a?a[1]:(+new Date))})(document.cookie.match(/olarkld=([0-9]+)/)),name:"olark",methods:["configure","extend","declare","identify"]});
/* custom configuration goes here (www.olark.com/documentation) */
olark.identify('5230-809-10-4522');/*]]>{/literal}*/</script>
<!-- end olark code -->

<script type="text/javascript">
adroll_adv_id = "6ZOMR2QLHZBEFEIMAJHJ4K";
adroll_pix_id = "FBQUGOS3RRAI3PZP2HVOYG";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
<img src="http://ad.retargeter.com/seg?add=308219&t=2" width="1" height="1" />
<script type="text/javascript">
    var __cho__ = {"pid":2057};
    (function() {
        var c = document.createElement('script');
        c.type = 'text/javascript';
        c.async = true;
        c.src = document.location.protocol + '//cc.chango.com/static/o.js';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(c, s);
    })();
</script>
<div id="ClickTaleDiv" style="display: none;" />

<script src="http://s.clicktale.net/WRc3.js" type="text/javascript"></script>
<script type="text/javascript">
  if(typeof ClickTale == 'function') { 
    var ClickTaleFetchFrom = 'http://www.toptal.com/clicktale/e791566ccaa044ffcbb9874dcb647d434c77845d.html';
    ClickTale(21681, 1, "www02");
  }
</script>


</div>
<script id='flash-message-tpl' type='text/x-underscore-template'>
<div class='flash flash_{{ type }}'>
<div class='message'>{{message}}</div>
</div>
</script>

<script type="text/javascript">if (!NREUMQ.f) { NREUMQ.f=function() {
NREUMQ.push(["load",new Date().getTime()]);
var e=document.createElement("script");
e.type="text/javascript";
e.src=(("http:"===document.location.protocol)?"http:":"https:") + "//" +
  "js-agent.newrelic.com/nr-100.js";
document.body.appendChild(e);
if(NREUMQ.a)NREUMQ.a();
};
NREUMQ.a=window.onload;window.onload=NREUMQ.f;
};
NREUMQ.push(["nrfj","beacon-6.newrelic.com","e3359cee6b",2530279,"JV0NEUYJCQkARxgVEwReCgYbFgoWEUYYFg4JRQ==",0,78,new Date().getTime(),"","","","",""]);</script></body>
</html>
